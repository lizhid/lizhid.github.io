<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>手机银行和门户联调功能</title>
      <link href="/2018/05/31/menhu/"/>
      <url>/2018/05/31/menhu/</url>
      <content type="html"><![CDATA[<p>简单介绍下当初和门户联调的一些功能。<br><a id="more"></a></p><h4 id="RSA加密"><a href="#RSA加密" class="headerlink" title="RSA加密"></a>RSA加密</h4><p>手机银行进入多元金融首页需数据加密传入，和门户约定使用RSA加密。门户提供公钥给手机银行对数据进行加密，门户收到数据后用私钥解密。</p><h4 id="数据验签说明"><a href="#数据验签说明" class="headerlink" title="数据验签说明"></a>数据验签说明</h4><p>1、集团门户为每个子系统分配一个md5key，作为md5摘要计算的盐值。</p><p>2、通信内容MD5签名过程：通信请求方将相关请求参数值做md5计算获取到校验串并发送给通信接收方。</p><p>3、通信内容MD5验签过程：通信接收方将收到的相关请求参数值做md5计算得到校验串，并跟收到的校验串做比对，一致则认为验签成功，不一致则验签失败。</p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>手机银行加密的数据拼上请求时的时间戳进行加密。</p><p>1、门户从加密数据内容中获取到手机银行的时间戳T1，以及门户当前系统时间戳T2。</p><p>当满足-10秒&lt;T2-T1&lt;30秒时，认为该请求是有效的，否则为无效。</p><p>2、通信接受方必须实现防重放攻击即收到的同一请求的url（带敏感信息的url），保证第一次收到时才有效。</p><p>3、 通信双方的系统时间保证跟北京时间同步。</p><p>4、手机银行客户端需要自定义请求报文头的user-agent信息，增加请求来源标识，统一为“cibbank”,以此增加授信机制。</p><p>5、门户和子公司交互均使用https协议。</p><h4 id="报文信息详细"><a href="#报文信息详细" class="headerlink" title="报文信息详细"></a>报文信息详细</h4><h6 id="A01"><a href="#A01" class="headerlink" title="A01"></a>A01</h6><p>1）业务场景</p><p>   手机银行已登录用户访问集团门户</p><p>2）请求方式</p><p>https:// app端集团门户入口地址?from=xxx&amp;data=xxx&amp;mac=xxx </p><p>3）data报文信息</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>是否必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sn</strong></td><td>是</td><td>A01</td></tr><tr><td><strong>from</strong></td><td>是</td><td>通信发起方系统编号</td></tr><tr><td><strong>certType</strong></td><td>是</td><td>app登录用户证件类型</td></tr><tr><td><strong>certNo</strong></td><td>是</td><td>app登录用户证件号码</td></tr><tr><td><strong>custName</strong></td><td>是</td><td>app登录用户姓名</td></tr><tr><td><strong>time</strong></td><td>是</td><td>发起系统时间戳</td></tr><tr><td><strong>target</strong></td><td>否</td><td>使用场景：集团门户调用app的登录脚本（doHomeAppLogin）时，会传个target参数，在app登录后需重定向到门户页面时必须带上target参数，参数值为门户js接口传递的那个值</td></tr></tbody></table><h6 id="A02"><a href="#A02" class="headerlink" title="A02"></a>A02</h6><p>1）业务场景</p><p>   手机银行app未登录用户访问集团门户。</p><p>2）请求方式</p><p>https:// app端集团门户入口地址?from=xxx&amp;data=xxx&amp;mac=xxx</p><p>3）data报文信息</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>是否必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sn</strong></td><td>是</td><td>A02</td></tr><tr><td><strong>from</strong></td><td>是</td><td>通信发起方系统编号</td></tr><tr><td><strong>time</strong></td><td>是</td><td>发起系统时间戳</td></tr></tbody></table><h6 id="AA1"><a href="#AA1" class="headerlink" title="AA1"></a>AA1</h6><p>1）业务场景</p><p>   手机银行app已登录用户访问财富总览(提供给原手机银行财富总览功能跳转使用，门户接受请求后响应财富总览功能页，并且返回直接回到APP)</p><p>2）请求方式</p><p>https:// app端集团门户入口地址?from=xxx&amp;data=xxx&amp;mac=xxx</p><p>3）data报文信息</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>是否必输</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sn</strong></td><td>是</td><td>AA1</td></tr><tr><td><strong>from</strong></td><td>是</td><td>通信发起方系统编号</td></tr><tr><td><strong>certType</strong></td><td>是</td><td>app登录用户证件类型</td></tr><tr><td><strong>certNo</strong></td><td>是</td><td>app登录用户证件号码</td></tr><tr><td><strong>custName</strong></td><td>是</td><td>app登录用户姓名</td></tr><tr><td><strong>time</strong></td><td>是</td><td>发起系统时间戳</td></tr></tbody></table><h4 id="手机银行访问门户报错时错误码信息表"><a href="#手机银行访问门户报错时错误码信息表" class="headerlink" title="手机银行访问门户报错时错误码信息表"></a>手机银行访问门户报错时错误码信息表</h4><table><thead><tr><th><strong>错误码</strong></th><th><strong>错误信息</strong></th></tr></thead><tbody><tr><td>52003</td><td>MD5校验失败</td></tr><tr><td>52004</td><td>RSA解密失败</td></tr><tr><td>52005</td><td>校验串超时</td></tr><tr><td>52006</td><td>json格式不对</td></tr><tr><td>52007</td><td>url重复请求</td></tr><tr><td>52023</td><td>报文数据的不完整错误</td></tr><tr><td>52027</td><td>非法的user-agent</td></tr></tbody></table><h4 id="手机银行提供给门户调用的接口"><a href="#手机银行提供给门户调用的接口" class="headerlink" title="手机银行提供给门户调用的接口"></a>手机银行提供给门户调用的接口</h4><table><thead><tr><th><strong>序号</strong></th><th style="text-align:center"><strong>接口名称</strong></th><th style="text-align:center"><strong>接口提供者</strong></th><th><strong>接口说明</strong></th></tr></thead><tbody><tr><td>1</td><td style="text-align:center">打开app</td><td style="text-align:center">入口app</td><td>H5页面调用该接口打开第三方app</td></tr><tr><td>2</td><td style="text-align:center">下载app</td><td style="text-align:center">入口app</td><td>H5页面调用该接口下载第三方app</td></tr><tr><td>3</td><td style="text-align:center">app返回</td><td style="text-align:center">入口app</td><td>门户调用该接口返回到入口app首屏</td></tr><tr><td>4</td><td style="text-align:center">app登录</td><td style="text-align:center">入口app</td><td>门户调用该接口打开入口app的用户登录界面</td></tr><tr><td>5</td><td style="text-align:center">app分享</td><td style="text-align:center">入口app</td><td>H5页面调用该接口分享指定内容</td></tr></tbody></table><h4 id="打开app接口"><a href="#打开app接口" class="headerlink" title="打开app接口"></a>打开app接口</h4><p>1） 功能描述</p><p>H5页面调用该接口打开第三方app。</p><p>2） 业务场景</p><p>H5页面基于业务需求，打开其他子公司app。例如：门户的金融资讯，当用户点击“更多”时，提示用户“请您前往“兴业研究”客户端，获取更多精彩资讯。”，用户可选择“打开”兴业研究app。</p><p>3） 接口格式说明</p><p><img src="/img/lizd/cib1.png" alt="img"></p><p>4） 接口的JSON参数说明</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>参数类型</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td><strong>iOSScheme</strong></td><td>String</td><td>必选，iOS应用scheme值</td></tr><tr><td><strong>AndroidPackageName</strong></td><td>String</td><td>必选，Android应用包名</td></tr><tr><td><strong>AndroidClassName</strong></td><td>String</td><td>必选，Android应用启动页面类名</td></tr><tr><td><strong>callbackName</strong></td><td>String</td><td>可选，回调方法名（打开失败时，入口app执行H5页面定义的回调方法）</td></tr></tbody></table><h4 id="下载app接口"><a href="#下载app接口" class="headerlink" title="下载app接口"></a>下载app接口</h4><p>1） 功能描述</p><p>H5页面调用该接口下载第三方app（通过打开浏览器下载）。</p><p>2） 业务场景</p><p>H5页面基于业务需求，打开其他子公司app。例如：门户的金融资讯，当用户点击“更多”时，提示用户“请您前往“兴业研究”客户端，获取更多精彩资讯。”，用户可选择“下载”兴业研究app。</p><p>3） 接口格式说明</p><p><img src="/img/lizd/cib2.png" alt="img"></p><p>4） 接口的JSON参数说明</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>参数类型</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td><strong>url</strong></td><td>String</td><td>必选，iOS或Android应用的下载地址</td></tr></tbody></table><h4 id="返回app"><a href="#返回app" class="headerlink" title="返回app"></a>返回app</h4><p>1） 功能描述</p><p>门户调用该接口返回到入口app首屏。</p><p>2） 业务场景</p><p>当门户需要返回到入口app时，调用该接口。</p><p>3） 接口格式说明</p><p><img src="/img/lizd/cib3.png" alt="img"></p><h4 id="登录接口"><a href="#登录接口" class="headerlink" title="登录接口"></a>登录接口</h4><p>1） 功能描述</p><p>门户调用该接口打开入口app的用户登录界面。</p><p>2） 业务场景</p><p>门户允许用户以未登录状态访问，但门户的财富总览和承接页要求用户必须以登录状态访问。所以当未登录的用户要访问财富总览或承接页时，门户会调用入口app的用户登录界面，引导用户进行登录。登录成功后，自动跳转到财富总览或承接页。</p><p>3） 接口格式说明</p><p><img src="/img/lizd/cib4.png" alt="img"></p><p>4） 接口的JSON参数说明</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>参数类型</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td><strong>target</strong></td><td>String</td><td>可选，用户登录成功后跳转到的目标地址（子公司系统编号或财富总览编号）</td></tr></tbody></table><h4 id="分享接口"><a href="#分享接口" class="headerlink" title="分享接口"></a>分享接口</h4><p>1） 功能描述</p><p>H5页面调用该接口分享指定内容。</p><p>2） 业务场景</p><p>门户或子公司基于业务需求，引导用户分享指定的产品服务或营销活动等。</p><p>3） 接口格式说明</p><p><img src="/img/lizd/cib5.png" alt="img"></p><p>4） 接口的JSON参数说明</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>参数类型</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td><strong>url</strong></td><td>String</td><td>必选，分享内容的URL地址</td></tr><tr><td><strong>title</strong></td><td>String</td><td>必选，分享内容的标题</td></tr><tr><td><strong>description</strong></td><td>String</td><td>可选，分享内容的描述</td></tr><tr><td><strong>picUrl</strong></td><td>String</td><td>可选，分享内容的缩略图地址</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 李志丹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> app </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Bootstrap 轮播（Carousel）插件</title>
      <link href="/2018/05/29/Bootstrap%20Carousel/"/>
      <url>/2018/05/29/Bootstrap%20Carousel/</url>
      <content type="html"><![CDATA[<p>Bootstrap 轮播（Carousel）插件是一种灵活的响应式的向站点添加滑块的方式。除此之外，内容也是足够灵活的，可以是图像、内嵌框架、视频或者其他您想要放置的任何类型的内容。</p><a id="more"></a><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面是一个简单的幻灯片，使用 Bootstrap 轮播（Carousel）插件显示了一个循环播放元素的通用组件。为了实现轮播，您只需要添加带有该标记的代码即可。不需要使用 data 属性，只需要简单的基于 class 的开发即可。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;myCarousel&quot; class=&quot;carousel slide&quot;&gt;</span><br><span class="line">    &lt;!-- 轮播（Carousel）指标 --&gt;</span><br><span class="line">    &lt;ol class=&quot;carousel-indicators&quot;&gt;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;   </span><br><span class="line">    &lt;!-- 轮播（Carousel）项目 --&gt;</span><br><span class="line">    &lt;div class=&quot;carousel-inner&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item active&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;/wp-content/uploads/2014/07/slide1.png&quot; alt=&quot;First slide&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;/wp-content/uploads/2014/07/slide2.png&quot; alt=&quot;Second slide&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;/wp-content/uploads/2014/07/slide3.png&quot; alt=&quot;Third slide&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 轮播（Carousel）导航 --&gt;</span><br><span class="line">    &lt;a class=&quot;carousel-control left&quot; href=&quot;#myCarousel&quot; </span><br><span class="line">       data-slide=&quot;prev&quot;&gt; &lt;span _ngcontent-c3=&quot;&quot; aria-hidden=&quot;true&quot; class=&quot;glyphicon glyphicon-chevron-right&quot;&gt;&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">    &lt;a class=&quot;carousel-control right&quot; href=&quot;#myCarousel&quot; </span><br><span class="line">       data-slide=&quot;next&quot;&gt;&amp;rsaquo;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>结果如下所示：</p><p><img src="/img/lunbo.png" alt="简单的轮播（Carousel）插件"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li><p>通过 data 属性</p><p>：使用 data 属性可以很容易控制轮播（Carousel）的位置。</p><ul><li>属性 <strong>data-slide</strong> 接受关键字 <em>prev</em> 或 <em>next</em>，用来改变幻灯片相对于当前位置的位置。</li><li>使用 <strong>data-slide-to</strong> 来向轮播传递一个原始滑动索引，<strong>data-slide-to=”2”</strong> 将把滑块移动到一个特定的索引，索引从 0 开始计数。</li><li><strong>data-ride=”carousel”</strong> 属性用于标记轮播在页面加载时就开始动画播放。</li></ul></li><li><p>通过 JavaScript</p><p>：轮播（Carousel）可通过 JavaScript 手动调用，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.carousel&apos;).carousel()</span><br></pre></td></tr></table></figure></li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>有一些选项是通过 data 属性或 JavaScript 来传递的。下表列出了这些选项：</p><table><thead><tr><th>选项名称</th><th>类型/默认值</th><th>Data 属性名称</th><th>描述</th></tr></thead><tbody><tr><td>interval</td><td>number<em>默认值：5000</em></td><td>data-interval</td><td>自动循环每个项目之间延迟的时间量。如果为 false，轮播将不会自动循环。</td></tr><tr><td>pause</td><td>string<em>默认值：”hover”</em></td><td>data-pause</td><td>鼠标进入时暂停轮播循环，鼠标离开时恢复轮播循环。</td></tr><tr><td>wrap</td><td>boolean<em>默认值：true</em></td><td>data-wrap</td><td>轮播是否连续循环。</td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>下面是一些轮播（Carousel）插件中有用的方法：</p><table><thead><tr><th>方法</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>.carousel(options)</td><td>初始化轮播为可选的 options 对象，并开始循环项目。</td><td><code>$(&#39;#identifier&#39;).carousel({    interval: 2000})</code></td></tr><tr><td>.carousel(‘cycle’)</td><td>从左到右循环轮播项目。</td><td><code>$(&#39;#identifier&#39;).carousel(&#39;cycle&#39;)</code></td></tr><tr><td>.carousel(‘pause’)</td><td>停止轮播循环项目。</td><td><code>$(&#39;#identifier&#39;).carousel(&#39;pause&#39;)</code></td></tr><tr><td>.carousel(number)</td><td>循环轮播到某个特定的帧（从 0 开始计数，与数组类似）。</td><td><code>$(&#39;#identifier&#39;).carousel(number)</code></td></tr><tr><td>.carousel(‘prev’)</td><td>循环轮播到上一个项目。</td><td><code>$(&#39;#identifier&#39;).carousel(&#39;prev&#39;)</code></td></tr><tr><td>.carousel(‘next’)</td><td>循环轮播到下一个项目。</td><td><code>$(&#39;#identifier&#39;).carousel(&#39;next&#39;)</code></td></tr></tbody></table><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>下表列出了轮播（Carousel）插件中要用到的事件。这些事件可在函数中当钩子使用。</p><table><thead><tr><th>事件</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>slide.bs.carousel</td><td>当调用 slide 实例方法时立即触发该事件。</td><td><code>$(&#39;#identifier&#39;).on(&#39;slide.bs.carousel&#39;, function () {    // 执行一些动作...})</code></td></tr><tr><td>slid.bs.carousel</td><td>当轮播完成幻灯片过渡效果时触发该事件。</td><td><code>$(&#39;#identifier&#39;).on(&#39;slid.bs.carousel&#39;, function () {    // 执行一些动作...})</code></td></tr></tbody></table><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>下面的实例演示了事件的用法：</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;myCarousel&quot; class=&quot;carousel slide&quot;&gt;</span><br><span class="line">    &lt;!-- 轮播（Carousel）指标 --&gt;</span><br><span class="line">    &lt;ol class=&quot;carousel-indicators&quot;&gt;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;0&quot; </span><br><span class="line">            class=&quot;active&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li data-target=&quot;#myCarousel&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;   </span><br><span class="line">    &lt;!-- 轮播（Carousel）项目 --&gt;</span><br><span class="line">    &lt;div class=&quot;carousel-inner&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item active&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;/wp-content/uploads/2014/07/slide1.png&quot; alt=&quot;First slide&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;/wp-content/uploads/2014/07/slide2.png&quot; alt=&quot;Second slide&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;/wp-content/uploads/2014/07/slide3.png&quot; alt=&quot;Third slide&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 轮播（Carousel）导航 --&gt;</span><br><span class="line">        &lt;a class=&quot;left carousel-control&quot; href=&quot;#myCarousel&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a class=&quot;right carousel-control&quot; href=&quot;#myCarousel&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">&lt;/div&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(&apos;#myCarousel&apos;).on(&apos;slide.bs.carousel&apos;, function () &#123;</span><br><span class="line">        alert(&quot;当调用 slide 实例方法时立即触发该事件。&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>结果如下所示：</p><p><img src="/img/lunbo2.png" alt="轮播（Carousel）插件事件"></p>]]></content>
      
      <categories>
          
          <category> 李志丹 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Lua strings</title>
      <link href="/2018/05/10/Lua-string/"/>
      <url>/2018/05/10/Lua-string/</url>
      <content type="html"><![CDATA[<p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br><a id="more"></a><br>Lua 语言中字符串可以使用以下三种方式来表示：</p><ul><li>单引号间的一串字符。</li><li>双引号间的一串字符。</li><li>[[和]]间的一串字符。</li></ul><p>转义字符用于表示不能直接显示的字符，比如后退键，回车键，等。如在字符串转换双引号可以使用 “\””。</p><p>所有的转义字符和所对应的意义：</p><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) （跳到下一个TAB位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\</td><td>代表一个反斜线字符’’\’</td><td>092</td></tr><tr><td>\’</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\”</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\0</td><td>空字符(NULL)</td><td>000</td></tr><tr><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td><td>三位八进制</td></tr><tr><td>\xhh</td><td>1到2位十六进制所代表的任意字符</td><td>二位十六进制</td></tr></tbody></table><hr><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p>Lua 提供了很多的方法来支持字符串的操作：</p><table><thead><tr><th>序号</th><th>方法 &amp; 用途</th></tr></thead><tbody><tr><td>1</td><td><strong>string.upper(argument):</strong>字符串全部转为大写字母。</td></tr><tr><td>2</td><td><strong>string.lower(argument):</strong>字符串全部转为小写字母。</td></tr><tr><td>3</td><td><strong>string.gsub(mainString,findString,replaceString,num)</strong>在字符串中替换,mainString为要替换的字符串， findString 为被替换的字符，replaceString 要替换的字符，num 替换次数（可以忽略，则全部替换），如：<code>&gt; string.gsub(&quot;aaaa&quot;,&quot;a&quot;,&quot;z&quot;,3);zzza    3</code></td></tr><tr><td>4</td><td><strong>string.sub(s,i,j)</strong>      函数截取字符串s的从第i个字符到第j个字符之间的串。Lua中，字符串的第一个字符索引从1开始。你也可以使用负索引，负索引从字符串的结尾向前计数：-1指向最后一个字符，-2指向倒数第二个，以此类推。所以， string.sub(s, 1, j)返回字符串s的长度为j的前缀；string.sub(s, j, -1)返回从第j个字符开始的后缀。如果不提供第3个参数，默认为-1，因此我们将最后一个调用写为string.sub(s, j)；string.sub(s, 2, -2)返回去除第一个和最后一个字符后的子串。</td></tr><tr><td>5</td><td><strong>string.find (str, substr, [init, [end]])</strong>在一个指定的目标字符串中搜索指定的内容(第三个参数为索引),返回其具体位置。不存在则返回 nil。<code>&gt; string.find(&quot;Hello Lua user&quot;, &quot;Lua&quot;, 1) 7    9</code></td></tr><tr><td>6</td><td><strong>string.reverse(arg)</strong>字符串反转<code>&gt; string.reverse(&quot;Lua&quot;)auL</code></td></tr><tr><td>7</td><td><strong>string.format(…)</strong>返回一个类似printf的格式化字符串<code>&gt; string.format(&quot;the value is:%d&quot;,4)the value is:4</code></td></tr><tr><td>8</td><td><strong>string.char(arg) 和 string.byte(arg[,int])</strong>char 将整型数字转成字符并连接， byte 转换字符为整数值(可以指定某个字符，默认第一个字符)。<code>&gt; string.char(97,98,99,100)abcd&gt; string.byte(&quot;ABCD&quot;,4)68&gt; string.byte(&quot;ABCD&quot;)65&gt;</code></td></tr><tr><td>9</td><td><strong>string.len(arg)</strong>计算字符串长度。<code>string.len(&quot;abc&quot;)3</code></td></tr><tr><td>10</td><td><strong>string.rep(string, n)</strong>返回字符串string的n个拷贝<code>&gt; string.rep(&quot;abcd&quot;,2)abcdabcd</code></td></tr><tr><td>11</td><td><strong>..</strong>链接两个字符串<code>&gt; print(&quot;www.runoob&quot;..&quot;com&quot;)www.runoobcom</code></td></tr><tr><td>12</td><td><strong>string.gmatch(str, pattern)</strong>回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil。<code>&gt; for word in string.gmatch(&quot;Hello Lua user&quot;, &quot;%a+&quot;) do print(word) endHelloLuauser</code></td></tr><tr><td>13</td><td><strong>string.match(str, pattern, init)</strong>string.match()只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认为1。 在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有成功的配对时, 返回nil。<code>&gt; = string.match(&quot;I have 2 questions for you.&quot;, &quot;%d+ %a+&quot;)2 questions&gt; = string.format(&quot;%d, %q&quot;, string.match(&quot;I have 2 questions for you.&quot;, &quot;(%d+) (%a+)&quot;))2, &quot;questions&quot;</code></td></tr></tbody></table><h3 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h3><p>以下实例演示了如何对字符串大小写进行转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string1 = &quot;Lua&quot;;</span><br><span class="line">print(string.upper(string1))</span><br><span class="line">print(string.lower(string1))</span><br></pre></td></tr></table></figure><p>以上代码执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LUA</span><br><span class="line">lua</span><br></pre></td></tr></table></figure><h3 id="字符串查找与反转"><a href="#字符串查找与反转" class="headerlink" title="字符串查找与反转"></a>字符串查找与反转</h3><p>以下实例演示了如何对字符串进行查找与反转操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = &quot;Lua Tutorial&quot;</span><br><span class="line">-- 查找字符串</span><br><span class="line">print(string.find(string,&quot;Tutorial&quot;))</span><br><span class="line">reversedString = string.reverse(string)</span><br><span class="line">print(&quot;新字符串为&quot;,reversedString)</span><br></pre></td></tr></table></figure><p>以上代码执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5    12</span><br><span class="line">新字符串为    lairotuT auL</span><br></pre></td></tr></table></figure><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><p>Lua 提供了 string.format() 函数来生成具有特定格式的字符串, 函数的第一个参数是格式 , 之后是对应格式中每个代号的各种数据。</p><p>由于格式字符串的存在, 使得产生的长字符串可读性大大提高了。这个函数的格式很像 C 语言中的 printf()。</p><p>以下实例演示了如何对字符串进行格式化操作：</p><p>格式字符串可能包含以下的转义码:</p><ul><li>%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符</li><li>%d, %i - 接受一个数字并将其转化为有符号的整数格式</li><li>%o - 接受一个数字并将其转化为八进制数格式</li><li>%u - 接受一个数字并将其转化为无符号整数格式</li><li>%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母</li><li>%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母</li><li>%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e</li><li>%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E</li><li>%f - 接受一个数字并将其转化为浮点数格式</li><li>%g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式</li><li>%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式</li><li>%s - 接受一个字符串并按照给定的参数格式化该字符串</li></ul><p>为进一步细化格式, 可以在%号后添加参数. 参数将以如下的顺序读入:</p><ul><li>(1) 符号: 一个+号表示其后的数字转义符将让正数显示正号. 默认情况下只有负数显示符号.</li><li>(2) 占位符: 一个0, 在后面指定了字串宽度时占位用. 不填时的默认占位符是空格.</li><li>(3) 对齐标识: 在指定了字串宽度时, 默认为右对齐, 增加-号可以改为左对齐.</li><li>(4) 宽度数值</li><li>(5) 小数位数/字串裁切: 在宽度数值后增加的小数部分n, 若后接f(浮点数转义符, 如%6.3f)则设定该浮点数的小数只保留n位, 若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string1 = &quot;Lua&quot;</span><br><span class="line">string2 = &quot;Tutorial&quot;</span><br><span class="line">number1 = 10</span><br><span class="line">number2 = 20</span><br><span class="line">-- 基本字符串格式化</span><br><span class="line">print(string.format(&quot;基本格式化 %s %s&quot;,string1,string2))</span><br><span class="line">-- 日期格式化</span><br><span class="line">date = 2; month = 1; year = 2014</span><br><span class="line">print(string.format(&quot;日期格式化 %02d/%02d/%03d&quot;, date, month, year))</span><br><span class="line">-- 十进制格式化</span><br><span class="line">print(string.format(&quot;%.4f&quot;,1/3))</span><br></pre></td></tr></table></figure><p>以上代码执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本格式化 Lua Tutorial</span><br><span class="line">日期格式化 02/01/2014</span><br><span class="line">0.3333</span><br></pre></td></tr></table></figure><p>其他例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string.format(&quot;%c&quot;, 83)            输出S</span><br><span class="line">string.format(&quot;%+d&quot;, 17.0)              输出+17</span><br><span class="line">string.format(&quot;%05d&quot;, 17)               输出00017</span><br><span class="line">string.format(&quot;%o&quot;, 17)                 输出21</span><br><span class="line">string.format(&quot;%u&quot;, 3.14)               输出3</span><br><span class="line">string.format(&quot;%x&quot;, 13)                 输出d</span><br><span class="line">string.format(&quot;%X&quot;, 13)                 输出D</span><br><span class="line">string.format(&quot;%e&quot;, 1000)               输出1.000000e+03</span><br><span class="line">string.format(&quot;%E&quot;, 1000)               输出1.000000E+03</span><br><span class="line">string.format(&quot;%6.3f&quot;, 13)              输出13.000</span><br><span class="line">string.format(&quot;%q&quot;, &quot;One\nTwo&quot;)         输出&quot;One\</span><br><span class="line">                                        　　Two&quot;</span><br><span class="line">string.format(&quot;%s&quot;, &quot;monkey&quot;)           输出monkey</span><br><span class="line">string.format(&quot;%10s&quot;, &quot;monkey&quot;)         输出    monkey</span><br><span class="line">string.format(&quot;%5.3s&quot;, &quot;monkey&quot;)        输出  mon</span><br></pre></td></tr></table></figure><h3 id="字符与整数相互转换"><a href="#字符与整数相互转换" class="headerlink" title="字符与整数相互转换"></a>字符与整数相互转换</h3><p>以下实例演示了字符与整数相互转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 字符转换</span><br><span class="line">-- 转换第一个字符</span><br><span class="line">print(string.byte(&quot;Lua&quot;))</span><br><span class="line">-- 转换第三个字符</span><br><span class="line">print(string.byte(&quot;Lua&quot;,3))</span><br><span class="line">-- 转换末尾第一个字符</span><br><span class="line">print(string.byte(&quot;Lua&quot;,-1))</span><br><span class="line">-- 第二个字符</span><br><span class="line">print(string.byte(&quot;Lua&quot;,2))</span><br><span class="line">-- 转换末尾第二个字符</span><br><span class="line">print(string.byte(&quot;Lua&quot;,-2))</span><br><span class="line"></span><br><span class="line">-- 整数 ASCII 码转换为字符</span><br><span class="line">print(string.char(97))</span><br></pre></td></tr></table></figure><p>以上代码执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">76</span><br><span class="line">97</span><br><span class="line">97</span><br><span class="line">117</span><br><span class="line">117</span><br><span class="line">a</span><br></pre></td></tr></table></figure><h3 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h3><p>以下实例演示了其他字符串操作，如计算字符串长度，字符串连接，字符串复制等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">string1 = &quot;www.&quot;</span><br><span class="line">string2 = &quot;runoob&quot;</span><br><span class="line">string3 = &quot;.com&quot;</span><br><span class="line">-- 使用 .. 进行字符串连接</span><br><span class="line">print(&quot;连接字符串&quot;,string1..string2..string3)</span><br><span class="line"></span><br><span class="line">-- 字符串长度</span><br><span class="line">print(&quot;字符串长度 &quot;,string.len(string2))</span><br><span class="line"></span><br><span class="line">-- 字符串复制 2 次</span><br><span class="line">repeatedString = string.rep(string2,2)</span><br><span class="line">print(repeatedString)</span><br></pre></td></tr></table></figure><p>以上代码执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">连接字符串    www.runoob.com</span><br><span class="line">字符串长度     6</span><br><span class="line">runoobrunoob</span><br></pre></td></tr></table></figure><h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><p>Lua 中的匹配模式直接用常规的字符串来描述。 它用于模式匹配函数 string.find, string.gmatch, string.gsub, string.match。</p><p>你还可以在模式串中使用字符类。</p><p>字符类指可以匹配一个特定字符集合内任何字符的模式项。比如，字符类%d匹配任意数字。所以你可以使用模式串 ‘%d%d/%d%d/%d%d%d%d’ 搜索 dd/mm/yyyy 格式的日期：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;Deadline is 30/05/1999, firm&quot;</span><br><span class="line">date = &quot;%d%d/%d%d/%d%d%d%d&quot;</span><br><span class="line">print(string.sub(s, string.find(s, date)))    --&gt; 30/05/1999</span><br></pre></td></tr></table></figure><p>下面的表列出了Lua支持的所有字符类：</p><p>单个字符(除 ^$()%.[]*+-? 外): 与该字符自身配对</p><ul><li><p>.(点): 与任何字符配对</p></li><li><p>%a: 与任何字母配对</p></li><li><p>%c: 与任何控制符配对(例如\n)</p></li><li><p>%d: 与任何数字配对</p></li><li><p>%l: 与任何小写字母配对</p></li><li><p>%p: 与任何标点(punctuation)配对</p></li><li><p>%s: 与空白字符配对</p></li><li><p>%u: 与任何大写字母配对</p></li><li><p>%w: 与任何字母/数字配对</p></li><li><p>%x: 与任何十六进制数配对</p></li><li><p>%z: 与任何代表0的字符配对</p></li><li><p>%x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对</p></li><li><p>[数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对</p></li><li><p>[^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对</p></li></ul><p>当上述的字符类用大写书写时, 表示与非此字符类的任何字符配对. 例如, %S表示与任何非空白字符配对.例如，’%A’非字母的字符:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; print(string.gsub(&quot;hello, up-down!&quot;, &quot;%A&quot;, &quot;.&quot;))</span><br><span class="line">hello..up.down.    4</span><br></pre></td></tr></table></figure><p>数字4不是字符串结果的一部分，他是gsub返回的第二个结果，代表发生替换的次数。</p><p>在模式匹配中有一些特殊字符，他们有特殊的意义，Lua中的特殊字符如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( ) . % + - * ? [ ^ $</span><br></pre></td></tr></table></figure><p>‘%’ 用作特殊字符的转义字符，因此 ‘%.’ 匹配点；’%%’ 匹配字符 ‘%’。转义字符 ‘%’不仅可以用来转义特殊字符，还可以用于所有的非字母的字符。</p><p><strong>模式条目可以是：</strong></p><ul><li>单个字符类匹配该类别中任意单个字符；</li><li>单个字符类跟一个 ‘<code>*</code>‘， 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串；</li><li>单个字符类跟一个 ‘<code>+</code>‘， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串；</li><li>单个字符类跟一个 ‘<code>-</code>‘， 将匹配零或更多个该类的字符。 和 ‘<code>*</code>‘ 不同， 这个条目总是匹配尽可能短的串；</li><li>单个字符类跟一个 ‘<code>?</code>‘， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个；</li><li><code>%*n*</code>， 这里的 <em>n</em> 可以从 1 到 9； 这个条目匹配一个等于 <em>n</em> 号捕获物（后面有描述）的子串。</li><li><code>%b*xy*</code>， 这里的 <em>x</em> 和 <em>y</em> 是两个明确的字符； 这个条目匹配以 <em>x</em> 开始 <em>y</em> 结束， 且其中 <em>x</em> 和 <em>y</em> 保持 <em>平衡</em> 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 <em>x</em> 就 <em>+1</em> ，读到一个 <em>y</em> 就 <em>-1</em>， 最终结束处的那个 <em>y</em> 是第一个记数到 0 的 <em>y</em>。 举个例子，条目 <code>%b()</code> 可以匹配到括号平衡的表达式。</li><li><code>%f[*set*]</code>， 指 <em>边境模式</em>； 这个条目会匹配到一个位于 <em>set</em> 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 <em>set</em> 。 集合 <em>set</em> 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 ‘<code>\0</code>‘ 一样。</li></ul><p><strong>模式：</strong></p><p><em>模式</em> 指一个模式条目的序列。 在模式最前面加上符号 ‘<code>^</code>‘ 将锚定从字符串的开始处做匹配。 在模式最后面加上符号 ‘<code>$</code>‘ 将使匹配过程锚定到字符串的结尾。 如果 ‘<code>^</code>‘ 和 ‘<code>$</code>‘ 出现在其它位置，它们均没有特殊含义，只表示自身。</p><p><strong>捕获：</strong></p><p>模式可以在内部用小括号括起一个子模式； 这些子模式被称为 <em>捕获物</em>。 当匹配成功时，由 <em>捕获物</em> 匹配到的字符串中的子串被保存起来用于未来的用途。 捕获物以它们左括号的次序来编号。 例如，对于模式 <code>&quot;(a*(.)%w(%s*))&quot;</code> ， 字符串中匹配到 <code>&quot;a*(.)%w(%s*)&quot;</code> 的部分保存在第一个捕获物中 （因此是编号 1 ）； 由 “<code>.</code>“ 匹配到的字符是 2 号捕获物， 匹配到 “<code>%s*</code>“ 的那部分是 3 号。</p><p>作为一个特例，空的捕获 <code>()</code> 将捕获到当前字符串的位置（它是一个数字）。 例如，如果将模式 <code>&quot;()aa()&quot;</code> 作用到字符串<code>&quot;flaaap&quot;</code> 上，将产生两个捕获物： 3 和 5 。</p>]]></content>
      
      <categories>
          
          <category> 李志丹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React 简单介绍</title>
      <link href="/2018/04/09/React/"/>
      <url>/2018/04/09/React/</url>
      <content type="html"><![CDATA[<p>React 是较早使用 JavaScript 构建大型、快速的 Web 应用程序的技术方案。它已经被广泛应用于 Facebook 和 Instagram。<br><a id="more"></a></p><h2 id="React介绍"><a href="#React介绍" class="headerlink" title="React介绍"></a>React介绍</h2><p>React 是为了解决一个问题：构建随着时间数据不断变化的大规模应用程序。</p><p>React 采用下面两个主要的思想：</p><ul><li>简单：表达出应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。</li><li>声明式：当数据变化了，React 概念上是类似点击了更新的按钮，但仅会更新变化的部分。</li></ul><p>React 都是关于构建<code>可复用的组件</code>。通过 React 唯一要做的事情就是构建组件。得益于其良好的封装性，组件使代码复用。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前Web应用的开发流程中，前端代码的开发和维护的工作量日益增大。与此同时，开源社区中也涌现出了很多的前端开发框架用于提升前端代码开发和维护的效率。按照类型分为：</p><ul><li>UI框架。如Bootstrap、MUI等</li><li>Library类型框架。如JQuery等</li><li>架构类框架。如AngularJS、Backbone、React</li></ul><p>使用统一的开发框架、开发规范无疑可以给MUIP上应用开发的效率和维护成本带来好处。结合移动应用的开发特点，框架需要满足以下的要求：</p><ul><li>提供公共组件的封装机制，较容易实现组件及代码复用；</li><li>满足移动设备上的运行效率要求，较容易实现好的用户体验；</li><li>开放标准及开发源码，有良好的可扩展性和可集成性；</li><li>社区活跃，有大量的开发人群；</li></ul><p>综合以上考虑，我们拟选择React框架来为作为应用开发的默认框架，并基于它定义应用上的公共组件。</p><h2 id="Webpack介绍"><a href="#Webpack介绍" class="headerlink" title="Webpack介绍"></a>Webpack介绍</h2><p>Webpack 是一个模块打包工具，可以使用Webpack管理模块依赖，并编绎输出模块所需的静态文件。</p><p>Webpack优点：</p><ul><li>模块来源广泛，支持包括npm/bower等等的各种主流模块安装／依赖解决方案。</li><li>模块规范支持全面，amd/commonjs以及shimming等一应具全。</li><li>浏览器端足迹小，移动端友好，却对热加载乃至热替换有很好的支持。</li><li>插件机制完善，实现本身实现同样模块化，容易扩展。</li></ul><p>支持的两种模块加载模式：</p><ul><li>同步加载模式： CommonJS (Node.JS)的模式</li><li>异步加载模式：即 AMD 模式，与require.js相同</li></ul><h2 id="为何使用Webpack"><a href="#为何使用Webpack" class="headerlink" title="为何使用Webpack"></a>为何使用Webpack</h2><p>长久以来，Web开发者都是把所需Javascript、CSS文件一并放进HTML里面，对于庞大的项目来说管理起来非常麻烦。</p><p>Webpack就是一款专为Web开发设计的包管理器。它能够很好地管理、打包Web开发中所用到的Javascript、CSS以及各种静态文件（图片、字体等），等资源文件会被编译整合到一个静态文件中，对于开发人员只需简单引用这一个静态文件即可，让开发过程更加高效。</p><p>对于应用组件开发，将遵循CommonJS的开发规范，对组件进行开发，使用Webpack对所有的组件进行打包，从而避免开发人员每个组件单独的引入，对开发人员还可忽略复合组件间的依赖关系，无论对后期开发还是维护，对开发效率的提升上，都起到了关键的作用</p><h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="Node-js介绍"><a href="#Node-js介绍" class="headerlink" title="Node.js介绍"></a>Node.js介绍</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 <code>npm</code>，是全球最大的开源库生态系统。</p><p>在基于React的开发中正正使用到了Node.js的包管理工具<code>npm</code>，对资源包进行有效地管理。</p><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p><strong>第一步：下载安装文件</strong></p><p>下载nodejs，官网：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>，下载node-v5.3.0-x64.msi(Mac系统下载node-v5.3.0.pkg)，如下图：<br><img src="/img/node_download.png" alt="![img](/img/node_download.png)"></p><p><strong>第二步：Node.js安装</strong></p><p>下载完成之后，双击”node-v5.3.0-x64.msi”，开始安装nodejs，默认安装在<code>C:\Program Files\nodejs\</code>下。</p><p>在cmd控制台输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>控制台将打印出：<code>v8.9.3</code>，出现版本提示表示安装成功。</p><p>新版的Nodejs已经集成了<code>npm</code>，所以之前npm也一并安装好了。同样可以使用cmd命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>控制台将打印出：<code>5.8.0</code>，出现版本提示表示安装成功。</p><h2 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h2><p><img src="/img/what-is-webpack.png" alt="![img](/img/what-is-webpack.png)"></p><p>事实上它是一个打包工具，而不是像RequireJS或SeaJS这样的模块加载器，通过使用Webpack，能够像Node.js一样处理依赖关系，然后解析出模块之间的依赖，将代码打包。</p><p>Webpack可把各种资源，例如JS、JSX、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。可以直接使用 require(xxx) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情。</p><h2 id="Webpack安装"><a href="#Webpack安装" class="headerlink" title="Webpack安装"></a>Webpack安装</h2><p>全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 李志丹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于ios指纹登陆功能</title>
      <link href="/2018/04/01/%E5%85%B3%E4%BA%8Eios%E6%8C%87%E7%BA%B9%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/04/01/%E5%85%B3%E4%BA%8Eios%E6%8C%87%E7%BA%B9%E7%99%BB%E9%99%86%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<h3 id="设置指纹："><a href="#设置指纹：" class="headerlink" title="设置指纹："></a>设置指纹：</h3><p>要使用指纹登陆必须得先开通指纹登陆功能，所以我们需要先设置指纹开通，调用bol,ecode=native：canAuthenticate（）方法检测系统是否有设置指纹密码，该方法会返回两个值，当bol=false，ecode=-7时会提示用户尚未设置Touch iD，需要先在手机上设置touch id。bol=true时表示可以开通指纹功能。<br><a id="more"></a></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bol,eCode =native:canAuthenticate();</span><br><span class="line"><span class="keyword">if</span> bol == <span class="literal">false</span> and eCode == <span class="number">-7</span>  then</span><br><span class="line">    alert(<span class="string">"您尚未设置Touch ID，请先在手机系统“设置-Touch ID与密码”中添加指纹。"</span>);</span><br><span class="line">elseif bol == <span class="literal">true</span> then  --access_token开通指纹时生成</span><br><span class="line">    --可以做开通指纹的方法</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>为了更严谨点，当把access_token保存在客户端本地时，顺便也把access_token保持在数据库中，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--请求接口开通指纹，接口会返回access_token，yxts（有效天数），rzlx（认证类型）</span><br><span class="line">access_token=access_token[&quot;value&quot;];</span><br><span class="line">yxts=yxts[&quot;value&quot;];</span><br><span class="line">if database:getData(userid) == &quot;&quot; or database:getData(userid) == nil then</span><br><span class="line">zhiwen_password=yxts..&quot;|&quot;..FRM_time..&quot;|&quot;..rzlx;</span><br><span class="line">else                                zhiwen_password=database:getData(userid)..&quot;rytong&quot;..yxts..&quot;|&quot;..FRM_time..&quot;|&quot;..rzlx;</span><br><span class="line">end</span><br><span class="line">native:storeKeyAndSecret(&quot;access_token_key&quot;, access_token, &quot;access_token_serviceData&quot;);--ios把access_token用 storeKeyAndSecret保存</span><br><span class="line">database:addData(&quot;access_token_key&quot;, access_token);  --安卓保存在数据库中，现在ios也一起保存数据库中，</span><br><span class="line">database:addData(userid, zhiwen_password);</span><br></pre></td></tr></table></figure><p>还要把指纹有效期（90天）、设置开通指纹时的时间、登陆认证类型（主要是区分指纹还是手势）拼接成一个字段进行保存（zhiwen_password），</p><h2 id="登陆验证指纹："><a href="#登陆验证指纹：" class="headerlink" title="登陆验证指纹："></a>登陆验证指纹：</h2><p>设置完用指纹登陆后，这个时候回到登陆界面就可以用指纹进行登录了</p><p>登陆验证时先验证有效期过了没有，如果设置指纹时间超过90天则报错说</p><p><code>因您长时间未使用指纹登录，请先通过验证密码登录，成功登录后下次登录时可继续使用指纹登录。</code></p><p>反之进行下一步验证，调用客户端方法native:authenticate()，验证时会有传两个值给后台，方案图如下：</p><p><img src="/img/zw.png" alt="qqq"></p><p>部分代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if val1 == false then</span><br><span class="line">    if val2 == -3 or val2 == -6 or val2 == -10 or val2 == -1004 then  --点击验证密码, -6是该设备没有指纹功能,-10会话不可用，-1004身份验证失败，因为他需要显示已被禁止的UI</span><br><span class="line">    elseif val2 == -2 or val2 == -9 or val2 == -4 then -- -2点击取消,-9按home键取消，-4来电话的情况</span><br><span class="line">    elseif val2 == -7 or val2 == -5 then -- 没有设置指纹   -5关闭了指纹</span><br><span class="line">    elseif val2 == -8 then -- -8被锁了</span><br><span class="line">    elseif val2 == -1 then  -- -1, 错误输入超过三次</span><br><span class="line">    elseif val2 == 100 then  --您设备的TouchID发生了变化，请使用密码登录。</span><br><span class="line">    end</span><br><span class="line">elseif val1 == true then  --验证指纹成功</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>具体方法就不贴出来了，不同的app可能走的方法也不同，只是把大概的流程判断给贴出来。</p><p>验证成功的那一步还需要做个判断，因为有可能之前保存在客户端的access_token因为某些原因丢失，所以要判断access_token是否为空，如果为空就取设置时保存在数据库中的access_token，如果能取到值，那就把这个值送给接口，登陆成功后把这个值再次保存在客户端本地。如果从数据库还依然取不到access_token，那就只能提示用户使用密码登陆了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">local access_token=native:getSecretByKey(&quot;access_token_key&quot;, &quot;access_token_serviceData&quot;);  --取出保存在客户端的access_token</span><br><span class="line">if access_token == &quot;&quot; or access_token == nil then</span><br><span class="line">local access_token = database:getData(&quot;access_token_key&quot;);    --从客户端取不到的话就从数据库取</span><br><span class="line">if access_token == &quot;&quot; or access_token == nil then</span><br><span class="line">        local  userid=gzjzl..gzjhm;              --数据库还取不到的话就提示用户用密码登录</span><br><span class="line">        database:addData(userid, &quot;&quot;);</span><br><span class="line">cmm_unit_fun.public:alert(&quot;指纹密钥已丢失,请使用密码登录&quot;,&quot;确定&quot;,</span><br><span class="line">        function(index)</span><br><span class="line">        changelogin();</span><br><span class="line">        location:reload();</span><br><span class="line">        end);</span><br><span class="line">else</span><br><span class="line">        native:storeKeyAndSecret(&quot;access_token_key&quot;, access_token, &quot;access_token_serviceData&quot;);--ios把access_token用 storeKeyAndSecret保存</span><br><span class="line">       --这里写把值传给接口的方法 </span><br><span class="line">     end</span><br><span class="line">else</span><br><span class="line">   --这里写把值传给接口的方法</span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Markdown 语法和 MWeb 写作使用说明</title>
      <link href="/2018/03/27/xxx/"/>
      <url>/2018/03/27/xxx/</url>
      <content type="html"><![CDATA[<h1 id="Markdown-语法和-MWeb-写作使用说明"><a href="#Markdown-语法和-MWeb-写作使用说明" class="headerlink" title="Markdown 语法和 MWeb 写作使用说明"></a>Markdown 语法和 MWeb 写作使用说明</h1><h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote><p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p></blockquote><a id="more"></a><h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 第一级标题 `&lt;h1&gt;` </span><br><span class="line">## 第二级标题 `&lt;h2&gt;` </span><br><span class="line">###### 第六级标题 `&lt;h6&gt;`</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*这些文字会生成`&lt;em&gt;`*</span><br><span class="line">_这些文字会生成`&lt;u&gt;`_</span><br><span class="line"></span><br><span class="line">**这些文字会生成`&lt;strong&gt;`**</span><br><span class="line">__这些文字会生成`&lt;strong&gt;`__</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p><p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p><p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 项目一 无序列表 `* + 空格键`</span><br><span class="line">* 项目二</span><br><span class="line">* 项目二的子项目一 无序列表 `TAB + * + 空格键`</span><br><span class="line">* 项目二的子项目二</span><br></pre></td></tr></table></figure><p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p><ul><li>项目一 无序列表 <code>* + 空格键</code></li><li>项目二<ul><li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li><li>项目二的子项目二</li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 项目一 有序列表 `数字 + . + 空格键`</span><br><span class="line">2. 项目二 </span><br><span class="line">3. 项目三</span><br><span class="line">1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`</span><br><span class="line">2. 项目三的子项目二</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>项目一 有序列表 <code>数字 + . + 空格键</code></li><li>项目二 </li><li>项目三<ol><li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li><li>项目三的子项目二</li></ol></li></ol><h3 id="列表中嵌入代码块语法"><a href="#列表中嵌入代码块语法" class="headerlink" title="列表中嵌入代码块语法"></a>列表中嵌入代码块语法</h3><pre><code>1. 项目一 有序列表 `数字 + . + 空格键`    列表中嵌入代码块必须前后空一行，如这个写法    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    其他文本。2. 项目二</code></pre><h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</span><br><span class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li style="list-style: none"><input type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li><li style="list-style: none"><input type="checkbox" checked> 任务二 已做任务 <code>- + 空格 + [x]</code></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</span><br><span class="line">格式: ![Alt Text](url)</span><br></pre></td></tr></table></figure><p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p><p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如为 <code>![GitHub-w140](set-up-git.gif)</code>：</p><p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email &lt;example@example.com&gt;</span><br><span class="line">[GitHub](http://github.com)</span><br><span class="line">自动生成连接  &lt;http://www.github.com/&gt;</span><br></pre></td></tr></table></figure><p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p><p>Email 连接： <a href="mailto:&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;</a><br><a href="http://github.com" target="_blank" rel="noopener">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a> 这样</p><h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">某某说:</span><br><span class="line">&gt; 第一行引用</span><br><span class="line">&gt; 第二行费用文字</span><br></pre></td></tr></table></figure><p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p><p>某某说:</p><blockquote><p>第一行引用<br>第二行费用文字</p></blockquote><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">像这样即可：`&lt;addr&gt;` `code`</span><br></pre></td></tr></table></figure><p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p><p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p><h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(arg) &#123;</span><br><span class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(arg) &#123;</span><br><span class="line">$.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure></code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">http://adrai.github.io/flowchart.js/</a></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一格表头 | 第二格表头</span><br><span class="line">--------- | -------------</span><br><span class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</span><br><span class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>第一格表头</th><th>第二格表头</th></tr></thead><tbody><tr><td>内容单元格 第一列第一格</td><td>内容单元格第二列第一格</td></tr><tr><td>内容单元格 第一列第二格 多加文字</td><td>内容单元格第二列第二格</td></tr></tbody></table><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p><pre><code>加删除线像这样用： ~~删除这些~~</code></pre><p>效果如下：</p><p>加删除线像这样用： <del>删除这些</del></p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p><pre><code>********- - -</code></pre><p>效果如下：</p><hr><hr><hr><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">块级公式：</span><br><span class="line">$$x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</span><br><span class="line"></span><br><span class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</span><br><span class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</span><br><span class="line"></span><br><span class="line">行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</span><br></pre></td></tr></table></figure><p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p><p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p><p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p><h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个脚注：[^sample_footnote]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是一个脚注：<a href="这里是脚注信息">^sample_footnote</a></p><h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment --><!-- more --><p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[TOC]</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>[TOC]</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>My first</title>
      <link href="/2018/03/23/My-first/"/>
      <url>/2018/03/23/My-first/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器写博客"><a href="#欢迎使用Markdown编辑器写博客" class="headerlink" title="欢迎使用Markdown编辑器写博客"></a>欢迎使用Markdown编辑器写博客</h1><p>本Markdown编辑器使用<a href="https://github.com/benweet/stackedit" target="_blank" rel="noopener">StackEdit</a>修改而来，用它写博客，将会带来全新的体验哦：<br><a id="more"></a></p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong><em>LaTex</em>数学公式</strong></li><li><strong>UML序列图和流程图</strong></li><li><strong>离线写博客</strong></li><li><strong>导入导出Markdown文件</strong></li><li><strong>丰富的快捷键</strong></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>加粗    <code>Ctrl + B</code> </li><li>斜体    <code>Ctrl + I</code> </li><li>引用    <code>Ctrl + Q</code></li><li>插入链接    <code>Ctrl + L</code></li><li>插入代码    <code>Ctrl + K</code></li><li>插入图片    <code>Ctrl + G</code></li><li>提升标题    <code>Ctrl + H</code></li><li>有序列表    <code>Ctrl + O</code></li><li>无序列表    <code>Ctrl + U</code></li><li>横线    <code>Ctrl + R</code></li><li>撤销    <code>Ctrl + Z</code></li><li>重做    <code>Ctrl + Y</code></li></ul><h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</a></p></blockquote><p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net" target="_blank" rel="noopener">链接</a>等，详细语法参考帮助？。</p><p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra" target="_blank" rel="noopener">Github</a>.  </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 元</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 元</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 元</td><td style="text-align:center">234</td></tr></tbody></table><p>###定义列表</p><p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p><p>项目３<br>:   定义 C</p><p>:   定义 D</p><pre><code>&gt; 定义D内容</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure></p><p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p><p>[TOC]</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="noopener">math.stackexchange.com</a>.</p><ul><li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li><li>块级公式：</li></ul><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">这儿</a>.</p><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><p>或者流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">这儿</a>,</li><li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li></ul><h2 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="noopener">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p><p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p><p>博客发表后，本地缓存将被删除。　</p><p>用户可以选择 <i class="icon-disk"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p></blockquote><p>##浏览器兼容</p><ol><li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li><li>IE９以下不支持</li><li>IE９，１０，１１存在以下问题<ol><li>不支持离线功能</li><li>IE9不支持文件导入导出</li><li>IE10不支持拖拽文件导入</li></ol></li></ol><hr>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/23/hello-world/"/>
      <url>/2018/03/23/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
